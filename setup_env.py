#!/usr/bin/env python3
"""
Environment Setup Script for Universal Orlando ChatBot
This script helps configure environment variables and build settings.
"""

import os
import sys
import subprocess
from pathlib import Path

def load_env_file():
    """Load environment variables from .env file"""
    env_file = Path('.env')
    if not env_file.exists():
        print("‚ùå .env file not found! Please create one first.")
        return None
    
    env_vars = {}
    with open(env_file, 'r') as f:
        for line in f:
            line = line.strip()
            if line and not line.startswith('#') and '=' in line:
                key, value = line.split('=', 1)
                env_vars[key.strip()] = value.strip()
    
    return env_vars

def setup_ios_build():
    """Configure iOS build to use environment variables"""
    print("üçé Setting up iOS build configuration...")
    
    env_vars = load_env_file()
    if not env_vars:
        return False
    
    # Create iOS build configuration
    config_path = Path('ios/Flutter/Config.xcconfig')
    config_path.parent.mkdir(exist_ok=True)
    
    with open(config_path, 'w') as f:
        f.write("// Generated by setup_env.py\n")
        f.write("// This file contains build-time environment variables\n\n")
        for key, value in env_vars.items():
            if key.startswith('GOOGLE_') or key in ['FLASK_HOST', 'FLASK_PORT']:
                f.write(f"{key}={value}\n")
    
    print(f"‚úÖ Created {config_path}")
    return True

def setup_android_build():
    """Configure Android build to use environment variables"""
    print("ü§ñ Setting up Android build configuration...")
    
    env_vars = load_env_file()
    if not env_vars:
        return False
    
    # Update local.properties for Android
    local_props = Path('android/local.properties')
    existing_props = []
    
    if local_props.exists():
        with open(local_props, 'r') as f:
            existing_props = [line.strip() for line in f if not line.strip().startswith('GOOGLE_')]
    
    with open(local_props, 'w') as f:
        # Write existing properties first
        for prop in existing_props:
            if prop:
                f.write(prop + '\n')
        
        # Add our environment variables
        f.write('\n# Environment variables from .env\n')
        for key, value in env_vars.items():
            if key.startswith('GOOGLE_'):
                f.write(f"{key}={value}\n")
    
    print(f"‚úÖ Updated {local_props}")
    return True

def validate_setup():
    """Validate that the setup is correct"""
    print("üîç Validating setup...")
    
    env_vars = load_env_file()
    if not env_vars:
        return False
    
    issues = []
    
    # Check required variables
    required_vars = ['GOOGLE_MAPS_API_KEY']
    for var in required_vars:
        if var not in env_vars or not env_vars[var]:
            issues.append(f"Missing or empty: {var}")
        elif env_vars[var] in ['your_google_maps_api_key_here', 'YOUR_API_KEY_HERE']:
            issues.append(f"Placeholder value detected for: {var}")
    
    # Check API key format
    api_key = env_vars.get('GOOGLE_MAPS_API_KEY', '')
    if api_key and not api_key.startswith('AIza'):
        issues.append("Google Maps API key should start with 'AIza'")
    
    if issues:
        print("‚ùå Setup validation failed:")
        for issue in issues:
            print(f"   ‚Ä¢ {issue}")
        return False
    
    print("‚úÖ Setup validation passed!")
    return True

def main():
    """Main setup function"""
    print("üè∞ Universal Orlando ChatBot - Environment Setup")
    print("=" * 50)
    
    # Check if we're in the right directory
    if not Path('pubspec.yaml').exists():
        print("‚ùå Please run this script from the project root directory")
        sys.exit(1)
    
    # Load and validate environment
    if not validate_setup():
        print("\nüí° To fix issues:")
        print("   1. Make sure .env file exists")
        print("   2. Add your Google Maps API key: GOOGLE_MAPS_API_KEY=your_actual_key")
        print("   3. Run this script again")
        sys.exit(1)
    
    # Setup platform-specific configurations
    ios_ok = setup_ios_build()
    android_ok = setup_android_build()
    
    if ios_ok and android_ok:
        print("\nüéâ Environment setup complete!")
        print("\nüì± Next steps:")
        print("   ‚Ä¢ For iOS: flutter run")
        print("   ‚Ä¢ For Android: flutter run")
        print("   ‚Ä¢ For Backend: python3 predictive_in_park.py")
    else:
        print("\n‚ùå Setup completed with errors")
        sys.exit(1)

if __name__ == '__main__':
    main() 